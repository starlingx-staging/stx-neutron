From 87a8c625f3d1b073b5c23dd8e00ddbf57d4a69de Mon Sep 17 00:00:00 2001
From: Joseph Richard <Joseph.Richard@windriver.com>
Date: Tue, 13 Sep 2016 16:06:17 -0400
Subject: [PATCH 018/155] US86444: patching scripts for neutron processes

This commit introduces neutron-restart, a script for restarting neutron
services.  This is intended to be used for no-reboot patching
---
 bin/neutron-restart         | 146 ++++++++++++++++++++++++++++++++++++++++++++
 neutron/agent/dhcp/agent.py |   7 +++
 neutron/manager.py          |   7 +++
 neutron/service.py          |   1 +
 setup.cfg                   |   1 +
 5 files changed, 162 insertions(+)
 create mode 100755 bin/neutron-restart

diff --git a/bin/neutron-restart b/bin/neutron-restart
new file mode 100755
index 0000000..1adc478
--- /dev/null
+++ b/bin/neutron-restart
@@ -0,0 +1,146 @@
+#!/bin/bash
+#
+# Copyright (c) 2016 Wind River Systems, Inc.
+#
+# The right to copy, distribute, modify, or otherwise make use
+# of this software may be licensed only pursuant to the terms
+# of an applicable Wind River license agreement.
+#
+
+#
+# This script provides restart code for neutron
+#
+
+#
+# The patching subsystem provides a patch-functions bash source file
+# with useful function and variable definitions.
+#
+. /etc/patching/patch-functions
+
+service_or_agent_input=$1
+
+restart_service_or_agent()
+{
+    [[ $1 == $service_or_agent_input || $service_or_agent_input == "--all" ]] || \
+    [[ $service_or_agent_input == "--agents-using-haproxy" && \
+        ( $1 == "neutron-avr-agent" || $1 == "neutron-dhcp-agent" ) ]]
+}
+
+restart_neutron_server()
+{
+    if [ ! -f $PATCH_FLAGDIR/neutron-server.restarted ] && restart_service_or_agent neutron-server
+    then
+        # Check SM to see if neutron-server is running
+        sm-query service neutron-server | grep -q 'enabled-active'
+        if [ $? -eq 0 ]
+        then
+            loginfo "$0: Restarting neutron-server"
+
+            # Ask SM to restart neutron-server
+            sm-restart service neutron-server
+            touch $PATCH_FLAGDIR/neutron-server.restarted
+
+            # Wait up to 30 seconds for service to recover
+            let -i UNTIL=$SECONDS+30
+            while [ $UNTIL -ge $SECONDS ]
+            do
+                # Check to see if it's running
+                sm-query service neutron-server | grep -q 'enabled-active'
+                if [ $? -eq 0 ]
+                then
+                    break
+                fi
+
+                # Still not running? Let's wait 5 seconds and check again
+                sleep 5
+            done
+
+            sm-query service neutron-server | grep -q 'enabled-active'
+            if [ $? -ne 0 ]
+            then
+                # Still not running! Clear the flag and mark the RC as failed
+                loginfo "$0: Failed to restart neutron-server"
+                rm -f $PATCH_FLAGDIR/neutron-server.restarted
+                GLOBAL_RC=$PATCH_STATUS_FAILED
+                sm-query service neutron-server
+            fi
+        fi
+    fi
+}
+
+restart_neutron_agent()
+{
+    AGENT_TO_RESTART=$1
+    if [ ! -f $PATCH_FLAGDIR/$AGENT_TO_RESTART.restarted ] && restart_service_or_agent $AGENT_TO_RESTART
+    then
+        /etc/init.d/$AGENT_TO_RESTART status | grep -q "$AGENT_TO_RESTART is running"
+        if [ $? -eq 0 ]
+        then
+            loginfo "$0: Restarting $AGENT_TO_RESTART"
+            /etc/init.d/$AGENT_TO_RESTART stop > /dev/null
+            pmon-restart $AGENT_TO_RESTART
+            touch $PATCH_FLAGDIR/$AGENT_TO_RESTART.restarted
+            loginfo "$0: Restarting $AGENT_TO_RESTART"
+
+            # Wait up to 30 seconds for agent to recover
+            let -i UNTIL=$SECONDS+30
+            while [ $UNTIL -ge $SECONDS ]
+            do
+                # Check to see if it's running
+                /etc/init.d/$AGENT_TO_RESTART status | grep -q "$AGENT_TO_RESTART is running"
+                if [ $? -eq 0 ]
+                then
+                    break
+                fi
+                # Still not running? Let's wait 5 seconds and check again
+                sleep 5
+            done
+
+            /etc/init.d/$AGENT_TO_RESTART status | grep -q "$AGENT_TO_RESTART is running"
+            if [ $? -ne 0 ]
+            then
+                # Still not running! Clear the flag and mark the RC as failed
+                loginfo "$0: Failed to restart $AGENT_TO_RESTART"
+                rm -f $PATCH_FLAGDIR/$AGENT_TO_RESTART.restarted
+                GLOBAL_RC=$PATCH_STATUS_FAILED
+                /etc/init.d/$AGENT_TO_RESTART status
+            fi
+        fi
+    fi
+}
+
+show_help()
+{
+    echo "Usage:"
+    echo "    $0 --all                                    # Restart all neutron services and agents"
+    echo "    $0 --agents-using-haproxy                   # Restart agents using haproxy"
+    echo "    $0 <NEUTRON_AGENT_OR_SERVICE_TO_RESTART>    # Restart specified neutron agent or service"
+    echo "    $0 --help                                   # Show this help message"
+    exit 0
+}
+
+
+
+if [[ $service_or_agent_input == "--help" || -z $service_or_agent_input ]]
+then
+    show_help
+fi
+
+
+if is_controller
+then
+    # neutron-server only runs on the controller
+    restart_neutron_server
+fi
+
+
+if is_compute || is_cpe
+then
+    restart_neutron_agent neutron-avr-agent
+    restart_neutron_agent neutron-avs-agent
+    restart_neutron_agent neutron-dhcp-agent
+    restart_neutron_agent neutron-metadata-agent
+    restart_neutron_agent neutron-sriov-nic-agent
+fi
+
+exit $GLOBAL_RC
diff --git a/neutron/agent/dhcp/agent.py b/neutron/agent/dhcp/agent.py
index 1267adb..7734665 100644
--- a/neutron/agent/dhcp/agent.py
+++ b/neutron/agent/dhcp/agent.py
@@ -143,6 +143,13 @@ class DhcpAgent(manager.Manager):
         self.run()
         LOG.info("DHCP agent started")
 
+    def after_stop(self):
+        network_ids = self.cache.get_network_ids()
+        for network_id in network_ids:
+            network = self.cache.get_network_by_id(network_id)
+            self.disable_isolated_metadata_proxy(network)
+        LOG.info("DHCP agent stopped")
+
     def run(self):
         """Activate the DHCP agent."""
         self.sync_state()
diff --git a/neutron/manager.py b/neutron/manager.py
index a0217d1..2722bb8 100644
--- a/neutron/manager.py
+++ b/neutron/manager.py
@@ -71,6 +71,13 @@ class Manager(periodic_task.PeriodicTasks):
         """
         pass
 
+    def after_stop(self):
+        """Handler post termination stuff.
+
+        Child classes can override this method.
+        """
+        pass
+
 
 def validate_post_plugin_load():
     """Checks if the configuration variables are valid.
diff --git a/neutron/service.py b/neutron/service.py
index 29d47ae..41c863d 100644
--- a/neutron/service.py
+++ b/neutron/service.py
@@ -400,6 +400,7 @@ class Service(n_rpc.Service):
             except Exception:
                 LOG.exception("Exception occurs when timer stops")
         self.timers = []
+        self.manager.after_stop()
 
     def wait(self):
         super(Service, self).wait()
diff --git a/setup.cfg b/setup.cfg
index 8df4583..a80cf7a 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -38,6 +38,7 @@ data_files =
         etc/neutron/rootwrap.d/netns-cleanup.filters
         etc/neutron/rootwrap.d/openvswitch-plugin.filters
 scripts =
+    bin/neutron-restart
     bin/neutron-rootwrap-xen-dom0
 
 [entry_points]
-- 
2.7.4

